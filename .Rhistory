setwd("~/Documents/Office/R/git/medicalstats_in_R")
library(foreign)
data.sav = read.spss("data/cholest.sav", to.data.frame = T)
str(data.sav)
## Categorical
tab_sex = table(data.sav$sex); tab_categ = table(data.sav$categ)
tab_sex; tab_categ
prop.table(tab_sex)*100; prop.table(tab_categ)*100
cbind(n = tab_sex, "%" = prop.table(tab_sex)*100)
cbind(n = tab_categ, "%" = prop.table(tab_categ)*100)
# - now the shortcut
tab_all = sapply(data.sav[, c("sex", "categ")], table); tab_all
prop_all = sapply(tab_all, function(x) prop.table(x)*100); prop_all
# - after all, here is the shortcut...
library(epiDisplay)
codebook(data.sav)
# Cross-tabulation
tab = table(Category = data.sav$categ, Gender = data.sav$sex); tab  # count
per = prop.table(table(Category = data.sav$categ, Gender = data.sav$sex))*100
per  # %
cbind(tab, per)
addmargins(tab)  # marginal counts
# nicer view
cell = paste0(tab, " (", per, "%)")
addmargins(tab)  # marginal counts
# nicer view
cell = paste0(tab, " (", per, "%)")
str(tab)
tab1 = tab
tab1[] = cell[]
tab1
ftable(tab1)  # nicer 'flat' view
tab = table(Category = data.sav$categ, Gender = data.sav$sex); tab  # count
per = prop.table(table(Category = data.sav$categ, Gender = data.sav$sex))*100
per  # %
cbind(tab, per)
addmargins(tab)  # marginal counts
# nicer view
cell = paste0(tab, " (", per, "%)")
cell
str(tab)
tab1 = tab
tab1
tab1[]
tab1
cell[]
tab1[] = cell[]
tab1
ftable(tab1)  # nicer 'flat' view
# Cross-tabulation
tab = table(Category = data.sav$categ, Gender = data.sav$sex); tab  # count
per = prop.table(table(Category = data.sav$categ, Gender = data.sav$sex))*100
per  # %
cbind(tab, per)
addmargins(tab)  # marginal counts
# nicer view
cell = paste0(tab, " (", per, "%)")
str(tab)
tab1 = tab  # to give tab1 same dimension to tab
tab1[] = cell[]  # then copy all contents from cell to tab1
tab1
ftable(tab1)  # nicer 'flat' view
?by
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
tapply(groups, groups, length) #- is almost the same as
table(groups)
names(data.sav)
str(data.sav)
aggregate(categ ~ sex, data = data.sav)
aggregate(categ ~ sex, summary, data = data.sav)
summary(data.sav$female)
summary(data.sav$sex)
aggregate(categ ~ sex, response.frequencies, data = data.sav)
## Numerical
library(psych)  #to use describe
aggregate(categ ~ sex, response.frequencies, data = data.sav)
aggregate(. ~ sex, summary, data = data.sav)
aggregate(sex ~ ., summary, data = data.sav)
aggregate(., sex, summary, data = data.sav)
aggregate(categ, sex, summary, data = data.sav)
aggregate(data.sav$categ, data.sav$sex, summary)
data.sav$sex
aggregate(data.sav$categ, list(data.sav$sex), summary)
aggregate(data.sav$categ, list(sex = data.sav$sex), summary)
# Cross-tabulation
tab = table(Category = data.sav$categ, Gender = data.sav$sex); tab  # count
per = prop.table(table(Category = data.sav$categ, Gender = data.sav$sex))*100
per  # %
cbind(tab, per)
# - Using aggregate
aggregate(c(age, categ) ~ sex, codebook)
# - Using aggregate
aggregate(c(age, categ) ~ sex, summary)
# - Using aggregate
aggregate(c(age, categ) ~ sex, summary, data = data.sav)
tr(data.sav)
str(data.sav)
# - Using aggregate
aggregate(age ~ sex, summary, data = data.sav)
by(age, sex, summary)
by(data.sav$age, data.sav$sex, summary)
by(data.sav$categ, data.sav$sex, summary)
describeBy(data.sav$categ, data.sav$sex)
by(data.sav$categ, data.sav$sex, summary)
by(data.sav$categ, data.sav$sex, tab)
by(data.sav$categ, data.sav$sex, table)
# - using by and aggregate
aggregate(categ ~ sex, summary, data = data.sav)
?by
by(data.sav$categ, data.sav$sex, summary)
